#!/usr/bin/env python3
"""
Shim for HashLink compiled in pyhl/hashlink/build/bin (on *nix) or placed in parent dir (on Windows).
"""

import os
import platform
import subprocess
import sys


def main():
    script_dir = os.path.dirname(os.path.abspath(__file__))
    
    hashlink_dir = os.path.join(script_dir, "pyhl", "hashlink", "build", "bin") if platform.system() != "Windows" else os.path.join(script_dir, "..", "hashlink")
    
    executable_name = "hl.exe" if platform.system() == "Windows" else "hl"
    hashlink_path = os.path.join(hashlink_dir, executable_name)
    
    if not os.path.exists(hashlink_path):
        sys.stderr.write(f"Error: HashLink executable not found at {hashlink_path}\n")
        sys.exit(1)
    
    args = sys.argv[1:]
    
    # On Windows, convert file paths in arguments to absolute paths
    if platform.system() == "Windows":
        for i, arg in enumerate(args):
            if os.path.exists(arg) or (len(arg) > 0 and not arg.startswith('-')):
                args[i] = os.path.abspath(arg)
    
    cmd = [hashlink_path] + args
    
    env = os.environ.copy()
    if platform.system() != "Windows":
        env["LD_LIBRARY_PATH"] = hashlink_dir + ":" + env.get("LD_LIBRARY_PATH", "")
    
    try:
        if platform.system() != "Windows":
            process = subprocess.run(cmd, env=env)
            sys.exit(process.returncode)
        else:
            orig_dir = os.getcwd()
            os.chdir(hashlink_dir)
            process = subprocess.run(cmd, env=env)
            os.chdir(orig_dir)
            sys.exit(process.returncode)
    except Exception as e:
        sys.stderr.write(f"Error executing HashLink: {e}\n")
        sys.exit(1)

if __name__ == "__main__":
    main()